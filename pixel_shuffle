import torch.nn as nn

#%%
class PixelShuffle3D(nn.Module):
    def __init__(self, upscale_factor):
        super(PixelShuffle3D, self).__init__()

        self.upscale_factor = upscale_factor
    def forward(self, inputs):

        batch_size, channels,  in_height, in_width = inputs.size()

        channels //= self.upscale_factor ** 2  #*3 if 3D

        #out_depth = in_depth * self.upscale_factor  if 3D
        out_height = in_height * self.upscale_factor
        out_width = in_width * self.upscale_factor

        input_view = inputs.contiguous().view(
            batch_size, channels, self.upscale_factor, self.upscale_factor,
            in_height, in_width)

        #shuffle_out = input_view.permute(0, 1, 5, 2, 6, 3, 7, 4).contiguous() if 3D
        shuffle_out = input_view.permute(0, 1, 4, 2, 5, 3).contiguous()

        return shuffle_out.view(batch_size, channels, out_height, out_width)

#%%
import torch
from time import time

upscale_factor = 3

# cpu
# ps = PixelShuffle3D(upscale_factor)
# inputData = torch.rand(2, 16 * upscale_factor ** 3, 128, 128, 128)

# gpu
ps = PixelShuffle3D(upscale_factor).cuda()
inputData = torch.rand(1, 1 * upscale_factor * 3, 6, 6).cuda()

# testing
start = time()
output = ps(inputData)

print(time() - start)
print(inputData.size(), output.size())

